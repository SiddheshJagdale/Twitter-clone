// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid()) @map("id")
  name            String?
  username        String?        @unique
  bio             String?
  email           String?        @unique
  emailVerified   DateTime?
  coverImage      String?
  profileImage    String?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt()
  followingIds    String[]
  hashedPassword  String?
  hasNotification Boolean?
  posts           Post[]
  comments        Comment[]
  notifications   Notification[]
}

model Post {
  id        String    @id @default(uuid()) @map("id")
  body      String?
  image     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
  likedIds  String[]
  postId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  userId String?
}

model Comment {
  id        String    @id @default(uuid()) @map("id")
  body      String?
  image     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt()
  userId    String?
  postId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(uuid()) @map("id")
  body      String?
  userId    String?
  createdAt DateTime? @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id             String         @id @default(uuid()) @map("id")
//   name           String?
//   username       String?        @unique
//   bio            String?
//   email          String?        @unique
//   emailVerified  DateTime?
//   image          String?
//   coverImage     String?
//   profileImage   String?
//   createdAt      DateTime?      @default(now())
//   updatedAt      DateTime?      @updatedAt()
//   followingIds   Json?
//   hashedPassword String?
//   posts          Post[]         @relation("UserPosts")
//   comments       Comment[]      @relation("UserComments")
//   notifications  Notification[] @relation("UserNotifications")
// }

// model Post {
//   id        String    @id @default(uuid()) @map("id") // Keep this as a primary key
//   body      String?
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt()
//   likedIds  String[]
//   user      User      @relation("UserPosts", fields: [id], references: [id], onDelete: Cascade)
//   comments  Comment[]

//   // No need for a separate userId, using id as foreign key from User
// }

// model Comment {
//   id        String   @id @default(uuid()) @map("id") // Keep this as a primary key
//   body      String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()
//   postId    String?
//   post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
//   user      User     @relation("UserComments", fields: [id], references: [id], onDelete: Cascade)
// }

// model Notification {
//   id        String   @id @default(uuid()) @map("id") // Keep this as a primary key
//   body      String?
//   createdAt DateTime @default(now())
//   user      User     @relation("UserNotifications", fields: [id], references: [id], onDelete: Cascade)

//   // No need for a separate userId, using id as foreign key from User
// }
